// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: user.sql

package sqlc

import (
	"context"
	"database/sql"
	"time"
)

const checkUserExistsByEmail = `-- name: CheckUserExistsByEmail :one
SELECT 
    id,
    email,
    created_at,
    created_by,
    updated_at,
    updated_by
FROM users
WHERE email = ?1
`

type CheckUserExistsByEmailRow struct {
	ID        string         `json:"id"`
	Email     string         `json:"email"`
	CreatedAt time.Time      `json:"created_at"`
	CreatedBy string         `json:"created_by"`
	UpdatedAt sql.NullTime   `json:"updated_at"`
	UpdatedBy sql.NullString `json:"updated_by"`
}

func (q *Queries) CheckUserExistsByEmail(ctx context.Context, email string) (CheckUserExistsByEmailRow, error) {
	row := q.db.QueryRowContext(ctx, checkUserExistsByEmail, email)
	var i CheckUserExistsByEmailRow
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.CreatedAt,
		&i.CreatedBy,
		&i.UpdatedAt,
		&i.UpdatedBy,
	)
	return i, err
}

const createUser = `-- name: CreateUser :exec
INSERT INTO users (
    id,
    email,
    password,
    created_at,
    created_by
) VALUES (
    ?1,
    ?2,
    ?3,
    NOW(),
    NOW()
)
`

type CreateUserParams struct {
	ID       string `json:"id"`
	Email    string `json:"email"`
	Password string `json:"password"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) error {
	_, err := q.db.ExecContext(ctx, createUser, arg.ID, arg.Email, arg.Password)
	return err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT 
    id,
    email,
    password,
    created_at,
    created_by,
    updated_at,
    updated_by
FROM users
WHERE email = ?1
`

type GetUserByEmailRow struct {
	ID        string         `json:"id"`
	Email     string         `json:"email"`
	Password  string         `json:"password"`
	CreatedAt time.Time      `json:"created_at"`
	CreatedBy string         `json:"created_by"`
	UpdatedAt sql.NullTime   `json:"updated_at"`
	UpdatedBy sql.NullString `json:"updated_by"`
}

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (GetUserByEmailRow, error) {
	row := q.db.QueryRowContext(ctx, getUserByEmail, email)
	var i GetUserByEmailRow
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Password,
		&i.CreatedAt,
		&i.CreatedBy,
		&i.UpdatedAt,
		&i.UpdatedBy,
	)
	return i, err
}

const getUserById = `-- name: GetUserById :one
SELECT 
    id,
    email,
    created_at,
    created_by,
    updated_at,
    updated_by
FROM users
WHERE id = ?1
`

type GetUserByIdRow struct {
	ID        string         `json:"id"`
	Email     string         `json:"email"`
	CreatedAt time.Time      `json:"created_at"`
	CreatedBy string         `json:"created_by"`
	UpdatedAt sql.NullTime   `json:"updated_at"`
	UpdatedBy sql.NullString `json:"updated_by"`
}

func (q *Queries) GetUserById(ctx context.Context, id string) (GetUserByIdRow, error) {
	row := q.db.QueryRowContext(ctx, getUserById, id)
	var i GetUserByIdRow
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.CreatedAt,
		&i.CreatedBy,
		&i.UpdatedAt,
		&i.UpdatedBy,
	)
	return i, err
}

const getUserProfileByEmail = `-- name: GetUserProfileByEmail :one
SELECT 
    id,
    course_id,
    google_classroom_student_id,
    firstname,
    lastname,
    email,
    created_at,
    created_by,
    updated_at,
    updated_by
FROM users
WHERE email = ?1
`

type GetUserProfileByEmailRow struct {
	ID                       string         `json:"id"`
	CourseID                 string         `json:"course_id"`
	GoogleClassroomStudentID string         `json:"google_classroom_student_id"`
	Firstname                string         `json:"firstname"`
	Lastname                 string         `json:"lastname"`
	Email                    string         `json:"email"`
	CreatedAt                time.Time      `json:"created_at"`
	CreatedBy                string         `json:"created_by"`
	UpdatedAt                sql.NullTime   `json:"updated_at"`
	UpdatedBy                sql.NullString `json:"updated_by"`
}

func (q *Queries) GetUserProfileByEmail(ctx context.Context, email string) (GetUserProfileByEmailRow, error) {
	row := q.db.QueryRowContext(ctx, getUserProfileByEmail, email)
	var i GetUserProfileByEmailRow
	err := row.Scan(
		&i.ID,
		&i.CourseID,
		&i.GoogleClassroomStudentID,
		&i.Firstname,
		&i.Lastname,
		&i.Email,
		&i.CreatedAt,
		&i.CreatedBy,
		&i.UpdatedAt,
		&i.UpdatedBy,
	)
	return i, err
}

const getUsers = `-- name: GetUsers :many
SELECT 
    id,
    email,
    created_at,
    created_by,
    updated_at,
    updated_by
FROM users
`

type GetUsersRow struct {
	ID        string         `json:"id"`
	Email     string         `json:"email"`
	CreatedAt time.Time      `json:"created_at"`
	CreatedBy string         `json:"created_by"`
	UpdatedAt sql.NullTime   `json:"updated_at"`
	UpdatedBy sql.NullString `json:"updated_by"`
}

func (q *Queries) GetUsers(ctx context.Context) ([]GetUsersRow, error) {
	rows, err := q.db.QueryContext(ctx, getUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetUsersRow
	for rows.Next() {
		var i GetUsersRow
		if err := rows.Scan(
			&i.ID,
			&i.Email,
			&i.CreatedAt,
			&i.CreatedBy,
			&i.UpdatedAt,
			&i.UpdatedBy,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const registerStudent = `-- name: RegisterStudent :exec
INSERT INTO users (
    id,
    course_id,
    google_classroom_student_id,
    firstname,
    lastname,
    email,
    password,
    created_at,
    created_by
) VALUES (
    ?1,
    ?2,
    ?3,
    ?4,
    ?5,
    ?6,
    ?7,
    time('now'),
    time('now')
)
`

type RegisterStudentParams struct {
	ID                       string `json:"id"`
	CourseID                 string `json:"course_id"`
	GoogleClassroomStudentID string `json:"google_classroom_student_id"`
	Firstname                string `json:"firstname"`
	Lastname                 string `json:"lastname"`
	Email                    string `json:"email"`
	Password                 string `json:"password"`
}

func (q *Queries) RegisterStudent(ctx context.Context, arg RegisterStudentParams) error {
	_, err := q.db.ExecContext(ctx, registerStudent,
		arg.ID,
		arg.CourseID,
		arg.GoogleClassroomStudentID,
		arg.Firstname,
		arg.Lastname,
		arg.Email,
		arg.Password,
	)
	return err
}
