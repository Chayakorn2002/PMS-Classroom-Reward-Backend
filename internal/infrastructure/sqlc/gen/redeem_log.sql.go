// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: redeem_log.sql

package sqlc

import (
	"context"
)

const createRedeemLog = `-- name: CreateRedeemLog :exec
INSERT INTO redeem_log (
    id,
    course_id,
    google_classroom_student_id,
    assignment_id,
    created_at,
    created_by
) VALUES (
    ?1,
    ?2,
    ?3,
    ?4,
    time('now'),
    time('now')
)
`

type CreateRedeemLogParams struct {
	ID                       string `json:"id"`
	CourseID                 string `json:"course_id"`
	GoogleClassroomStudentID string `json:"google_classroom_student_id"`
	AssignmentID             string `json:"assignment_id"`
}

func (q *Queries) CreateRedeemLog(ctx context.Context, arg CreateRedeemLogParams) error {
	_, err := q.db.ExecContext(ctx, createRedeemLog,
		arg.ID,
		arg.CourseID,
		arg.GoogleClassroomStudentID,
		arg.AssignmentID,
	)
	return err
}

const getRedeemLogsByStudentId = `-- name: GetRedeemLogsByStudentId :many
SELECT 
    id,
    course_id,
    google_classroom_student_id,
    assignment_id
FROM redeem_log
WHERE google_classroom_student_id = ?1
`

type GetRedeemLogsByStudentIdRow struct {
	ID                       string `json:"id"`
	CourseID                 string `json:"course_id"`
	GoogleClassroomStudentID string `json:"google_classroom_student_id"`
	AssignmentID             string `json:"assignment_id"`
}

func (q *Queries) GetRedeemLogsByStudentId(ctx context.Context, googleClassroomStudentID string) ([]GetRedeemLogsByStudentIdRow, error) {
	rows, err := q.db.QueryContext(ctx, getRedeemLogsByStudentId, googleClassroomStudentID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetRedeemLogsByStudentIdRow
	for rows.Next() {
		var i GetRedeemLogsByStudentIdRow
		if err := rows.Scan(
			&i.ID,
			&i.CourseID,
			&i.GoogleClassroomStudentID,
			&i.AssignmentID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
